###Play with docker networks

docker container run --publish 8080:80 --detach --name local-nginx nginx
docker container top local-nginx
docker container inspect local-nginx
docker container stats local-nginx

###Start an nginx alpine container with "sh" . -it means interactive, when i leave the shell the container dies.
docker container run -it nginx:alpine sh

###same as above, but different distro
docker container run -it nginx bash
    apt-get update
    apt-get install inetutils-ping

###Start bash on a running container and when i exit it does NOT skill the container.
docker container exec -it ${CONTAINERID} bash

###Start a container and delete it as soon as it exits (--rm)
docker container run -it --rm centos:7 bash

###Start a container with a read only file system on a different network
docker container run --network local1 -it --rm --read-only centos:7 bash

###Show port address traslation
docker container port ${containerID/Name}

###All default docker networks are bridge (Allow host to container communications)
###When creating a docker network it has connectivity to the host but NOT other docker networks
###DNS is enabled by default on custom networks (Using the containers name)
###DNS is not enabled by default on the default network (you can use --link though to enable on a container)

docker network ls
docker network inspect ${NetworkID}
docker network create --driver (Defaults to bridge when not specified)

###Attach a running container to a different docker network (containers can span many networks at once)
docker network connect ${NETWORKNAME} ${CONTAINERID}
docker network disconnect ${NETWORKNAME} ${CONTAINERID}

###Shows the network the container is on
docker container inspect ${containerID}

##Lab to tets round robin DNS with containers
docker container run --detach --rm --network local1 --network-alias search elasticsearch:2
docker container run --detach --rm --network local1 --network-alias search elasticsearch:2
docker container run --detach --rm --network local1 --network-alias search elasticsearch:2

#Run alpine locally to see if you can resolve them by DNS (Run the shell then)
docker container run --network local1 -it --rm alpine sh
    nslookup search (looks for above network alias called search and resolves the 3 containers)

docker container run --network local1 --rm alpine nslookup search

#Run centos and see if you can resolve them
docker container run --network local1 -it --rm --read-only centos:7 bash
    curl -s search:9200

#Run it straight in the container
docker container run --network local1 --rm --read-only centos:7 curl -s search:9200

#clean up steps
##shows disk space used
docker system df

##clean up unused images
docker container prune
docker image prune
##This does everything (including unused network)
docker system prune
docker system prune -a